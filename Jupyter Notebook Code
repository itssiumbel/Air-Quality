# Libraries
import matplotlib.pyplot as plt
import pandas as pd
import plotly.express as px
import seaborn as sns
from pymongo import MongoClient
from sklearn.metrics import mean_absolute_error
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.arima.model import ARIMA

# Import and prepare data
client = MongoClient(host="localhost", port=27017)
db = client["air-quality"]
nairobi = db["nairobi"]

def wrangle(collection, resample_rule="1H"):

    results = collection.find(
        {"metadata.site": 29, "metadata.measurement": "P2"},
        projection={"P2": 1, "timestamp": 1, "_id": 0},
    )

    # Read results into DataFrame
    df = pd.DataFrame(list(results)).set_index("timestamp")

    # Localize timezone
    df.index = df.index.tz_localize("UTC").tz_convert("Africa/Nairobi")

    # Remove outliers
    df = df[df["P2"] < 500]

    # Resample and forward-fill
    y = df["P2"].resample(resample_rule).mean().fillna(method="ffill")

    return y
    
    y = wrangle (nairobi, resample_rule="1H")
y.head()

# Create ACF and PACF plots
fig, ax=plt.subplots(figsize=(15,6))
plot_acf(y, ax=ax);
plt.xlabel("Lag [hours]")
plt.ylabel("Correlation Coefficient")

fig, ax=plt.subplots(figsize=(15,6))
plot_pacf(y, ax=ax);
plt.xlabel("Lag [hours]")
plt.ylabel("Correlation Coefficient")

# Split data to the test set and trainig set 
y_train = y[(y.index>='2018-10-01 0:00:00+03:00') &(y.index<='2018-10-31 23:00:00+03:00')]
y_test = y[(y.index>= '2018-11-01 0:00:00+03:00') & (y.index <= '2018-11-01 23:00:00+03:00')]

#Build model
y_train_mean = y_train.mean()
y_pred_baseline = [y_train_mean] * len(y_train)
mae_baseline = mean_absolute_error(y_train, y_pred_baseline)
print("Mean P2 Reading:", round(y_train_mean, 2))
print("Baseline MAE:", round(mae_baseline, 2))

# Tune hyperparameters
p_params = range(0, 25, 8)
q_params = range(0,3, 1)
# Create dictionary to store MAEs
mae_grid = dict()
# Outer loop: Iterate through possible values for `p`
for p in p_params:
    # Create key-value pair in dict. Key is `p`, value is empty list.
    mae_grid[p] = list()
    # Inner loop: Iterate through possible values for `q`
    for q in q_params:
        # Combination of hyperparameters for model
        order = (p, 0, q)
        # Note start time
        start_time = time.time()
        # Train model
        model = ARIMA(y_train, order=order).fit()
        # Calculate model training time
        elapsed_time = round(time.time() - start_time, 2)
        print(f"Trained ARIMA {order} in {elapsed_time} seconds.")
        # Generate in-sample (training) predictions
        y_pred = model.predict()
        # Calculate training MAE
        mae = mean_absolute_error(y_train, y_pred)
        # Append MAE to list in dictionary
        mae_grid[p].append(mae)

print()
print(mae_grid)

mae_df = pd.DataFrame.from_dict(mae_grid)
mae_df.round(4)

sns.heatmap(mae_df, cmap="Greens")
plt.xlabel=("p values")
plt.ylabel=("q values")
plt.title=("ARMA Grid Search (Criterion: mae)")

# Check residuals
fig, ax = plt.subplots(figsize=(15, 12))
model.plot_diagnostics(fig=fig)

# Evaluate with a perform walk-forward validation
y_pred_wfv = pd.Series()
history = y_train.copy()
for i in range(len(y_test)):
    model = ARIMA(history, order=(8,0,1)).fit()
    next_pred = model.forecast()
    y_pred_wfv = y_pred_wfv.append(next_pred)
    history = history.append(y_test[next_pred.index])
    
    test_mae = mean_absolute_error(y_test, y_pred_wfv)
print("Test MAE (walk forward validation):", round(test_mae, 2))

# Communicate results 
df_predictions =  pd.DataFrame(
    {"y_test": y_test, "y_pred_wfv": y_pred_wfv}
)
fig = px.line(df_predictions, labels={"value": "P2"})
fig.show()
